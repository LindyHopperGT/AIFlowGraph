// Copyright https://github.com/MothCocoon/FlowGraph/graphs/contributors

#pragma once

#include "AIFlowActorBlackboardHelper.h"
#include "Interfaces/FlowDataPinGeneratorNodeInterface.h"
#include "Nodes/AIFlowNode.h"

#include "FlowNode_GetBlackboardValues.generated.h"

// Forward Declarations
class UFlowBlackboardEntryValue;

/**
 * Get blackboard values and provide them as output data pins
 */
UCLASS(DisplayName = "Get Blackboard Values")
class AIFLOW_API UFlowNode_GetBlackboardValues 
	: public UAIFlowNode
	, public IFlowDataPinGeneratorNodeInterface
{
	GENERATED_BODY()

public:

	UFlowNode_GetBlackboardValues();

	// UFlowNodeBase
	virtual void UpdateNodeConfigText_Implementation() override;
	// --

	// Must implement TrySupplyDataAs... for every EFlowPinType
	FLOW_ASSERT_ENUM_MAX(EFlowPinType, 16);

	// IFlowDataPinValueSupplierInterface
	virtual FFlowDataPinResult_Bool TrySupplyDataPinAsBool_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Int TrySupplyDataPinAsInt_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Float TrySupplyDataPinAsFloat_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Name TrySupplyDataPinAsName_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_String TrySupplyDataPinAsString_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Enum TrySupplyDataPinAsEnum_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Vector TrySupplyDataPinAsVector_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Rotator TrySupplyDataPinAsRotator_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_GameplayTag TrySupplyDataPinAsGameplayTag_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_GameplayTagContainer TrySupplyDataPinAsGameplayTagContainer_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Object TrySupplyDataPinAsObject_Implementation(const FName& PinName) const override;
	virtual FFlowDataPinResult_Class TrySupplyDataPinAsClass_Implementation(const FName& PinName) const override;
	// --
	
#if WITH_EDITOR
public:

	// IFlowContextPinSupplierInterface
	virtual bool SupportsContextPins() const override { return Super::SupportsContextPins() || !BlackboardEntries.IsEmpty(); }
	// --

	// UObject
	virtual void PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent) override;
	// --

	// IFlowDataPinGeneratorNodeInterface
	virtual void AutoGenerateDataPins(
		TMap<FName, FName>& InOutPinNameToBoundPropertyNameMap,
		TArray<FFlowPin>& InOutInputDataPins,
		TArray<FFlowPin>& InOutOutputDataPins) const override;

	// --

	// IFlowBlackboardAssetProvider
	virtual UBlackboardData* GetBlackboardAssetForPropertyHandle(const TSharedPtr<IPropertyHandle>& PropertyHandle) const override;
	// --

protected:

	void AppendEntriesForEveryActor(FTextBuilder& InOutTextBuilder) const;

	UBlackboardData* GetBlackboardAssetForEditor() const;
#endif // WITH_EDITOR

protected:

	static UBlackboardKeyType* GetBlackboardKeyTypeFromBlackboardKeyName(const UBlackboardData* BlackboardAsset, const FName& KeyName);

	UBlackboardComponent* GetBlackboardComponentToApplyTo() const;
	AActor* TryResolveActorForBlackboard() const;

	virtual bool TryFindPropertyByRemappedPinName(
		const FName& RemappedPinName,
		const FProperty*& OutFoundProperty,
		TInstancedStruct<FFlowDataPinProperty>& OutFoundInstancedStruct,
		EFlowDataPinResolveResult& InOutResult) const override;

protected:

	// Optional specific actor to use for the blackboard query.
	// If not specified, will use the flow graph's owning actor.
	UPROPERTY(Transient, meta = (DefaultForInputFlowPin, FlowPinType = "Object", DisplayPriority = 2))
	TObjectPtr<AActor> SpecificActor = nullptr;

	// Specific blackboard to use (optional, defaults to the flow asset's blackboard)
	UPROPERTY(EditAnywhere, Category = Configuration, DisplayName = "Specific Blackboard", meta = (DisplayPriority = 2))
	TObjectPtr<UBlackboardData> SpecificBlackboardAsset = nullptr;

	// Blackboard entries to get from the blackboard and output as data pins
	UPROPERTY(EditAnywhere, Category = Configuration, DisplayName = "Blackboard Entries", meta = (DisplayPriority = 3))
	TArray<FFlowBlackboardEntry> BlackboardEntries;
	
	// Search rule to use to find the "Specific Blackboard" (if specified)
	UPROPERTY(EditAnywhere, Category = Configuration, DisplayName = "Specific Blackboard Search Rule", meta = (EditCondition = "SpecificBlackboardAsset", DisplayAfter = SpecificBlackboardAsset))
	EActorBlackboardSearchRule SpecificBlackboardSearchRule = EActorBlackboardSearchRule::ActorAndControllerAndGameState;

	static FName INPIN_SpecificActor;
};
